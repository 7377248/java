interface Pet
{
	public String getName();
	public int getAge();
} 



abstract class Pets implements Pet 
{
	private String name;
	private int age;
	public Pets(String name,int age)
	{
		this.name = name;
		this.age = age;
	}
	public String getName()
	{
		return this.name;
	}
	public int getAge()
	{
		return this.age;
	}
	abstract public  String toString();
	public boolean equals(Object obj)
	{
		if(this == obj)
		{
			return true;
		}
		if(!(obj instanceof Pets))
		{
			return false;
		}
		Pets p = (Pets) obj;
		if(this.name.equals(p.name)&&this.age == p.age)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}




class Cat extends Pets 
{
	public Cat(String name,int age)
	{
		super(name,age);
	}
	public String toString()
	{
		return "猫的名字："+this.getName()+"\t年龄："+this.getAge();
	}
}





class Dog extends Pets 
{
	public Dog(String name,int age)
	{
		super(name,age);
	}
	public String toString()
	{
		return "狗的名字："+this.getName()+"\t年龄："+this.getAge();
	}
}



class PetShop 
{
	private Link all = new Link();
	public void add(Pet pet)
	{
		this.all.add(pet);
	}
	public void delete(Pet pet)
	{
		this.all.remove(pet);
	}
	public int size()
	{
		return this.all.size();
	}
	public Link search(String s)
	{
		Link searchlink  = new Link();
		Object [] obj = this.all.toArray();
		for(int i = 0;i<obj.length;i++)
		{
			Pet p = (Pet)obj[i];
			if (p.getName().contains(s))
			{
				searchlink.add(p);
			}
		}
		return searchlink;
	}
}





public class Link  //链表类,外部只能看见这一个类
{
	private class Node   //定义内部类,主要是为Link类服务
	{
		private Object data;    
		private Node   next;
		public Node(Object data)  //数据保存
		{
			this.data = data;
		}
		public void addNode(Node node) // 节点的连接
		{
			if(this.next == null)
			{
				this.next = node;
			}
			else
			{
				this.next.addNode(node);
			}
		}
		public boolean containsNode(Object data)
		{
			//第一次调用  this  = root
			//第二次       this = root.next
			//以此
			if(data.equals(this.data)) // 当前节点数据判断
			{
				return true;
			}
			else if(this.next != null) //判断下一个节点是否存在
			{
				return this.next.containsNode(data); //递归调用
			}
			else
			{
				return false;
			}
		}
		public Object getData( int index)
		{
			if(Link.this.foot ++ == index)
			{
				return this.data;
			}
			else
			{
				return this.next.getData(index);
			}
		}
		public void setData(int index,Object data)
		{
			if(Link.this.foot ++ == index)
			{
				this.data = data;
			}
			else
			{
				this.next.setData(index,data);
			}
		}
		//非根节点的删除,传入上一个节点以及要删除的数据
		public void removeData(Node previous ,Object data)
		{
			if(data.equals(this.data)) //当前节点数据判断
			{
				previous.next = this.next;
			}
			else
			{
				this.next.removeData(this,data);
			}
		}
		public void  toArrayNode()
		{
			Link.this.retArray[Link.this.foot ++] = this.data;
			if(this.next != null )
			{
				this.next.toArrayNode();
			}
		}
	}
	//=====================以上是内部类============================
	private Node root;   //根节点
	private int count = 0; //保存元素个数
	private int foot = 0;
	private Object []  retArray  ;
	public void add(Object data) //添加节点
	{
		if(data == null){ return;}
		Node newNode = new Node(data);
		if(this.root == null)
		{
			this.root = newNode;
		}
		else
		{
			this.root.addNode(newNode);
		}
		this.count ++;
	}
	public int size() //取得保存的数据总量
	{
		return this.count;
	}
	public boolean isEmpty()  //判断链表是否为空
	{
		return this.count == 0 ;
	}
	public boolean contains(Object data)   //判断数据是否存在
	{
		//先判断data和链表是否为空,若是直接返回false
		if(data == null || this.root == null)
		{
			return false;
		}
		//从根源素判断
		return this.root.containsNode(data);
	}
	public Object get(int  index) // 根据索引取得数据
	{
		this.foot = 0;
		if(index > this.count||index<0)
		{
			return null;
		}
		else
		{
			return this.root.getData(index);
		}
	}
	public void set(int index,Object data) // 将一个对象放置在链表制定位置上
	{
		if(index > this.count||index<0)
		{
			return;
		}
		else
		{
			this.foot = 0;
			this.root.setData(index,data);
		}
	}
	public Object [] toArray()  //将链表转换为对象数组
	{
		if(this.root == null)
		{
			return null;
		}
		this.foot = 0;
		this.retArray = new Object[this.count];
		this.root.toArrayNode();
		return this.retArray;
	}
	public  void remove(Object data) //删除对象数据
	{
		if(this.contains(data))
		{
			if(data.equals(this.root.data))
			{
				this.root = this.root.next;
			}
			else
			{
				this.root.next.removeData(this.root,data);
			}
			this.count -- ;
		}		
	}
}




class PetTest 
{
	public static void main(String[] args) 
	{
		PetShop shop = new PetShop();
		shop.add(new Cat("Catone",30));
		shop.add(new Cat("Cattwo",40));
		shop.add(new Cat("Catthree",50));
		shop.add(new Cat("Catfour",60));
		shop.add(new Dog("Dogone",300));
		System.out.println(shop.size());
		shop.delete(new Cat("Catone",50));
		System.out.println(shop.size());
		Link l = shop.search("one");
		Object [] obj = l.toArray();
		for(int i = 0;i < obj.length;i++)
		{
			System.out.println(obj[i]);
		}
	}
}
